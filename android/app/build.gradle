plugins {
    id 'com.android.application'
}
//apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

//project.ext.react = [
//        // the name of the generated asset file containing your JS bundle
//        bundleAssetName: "index.android.bundle",
//
//        // the entry file for bundle generation. If none specified and
//        // "index.android.js" exists, it will be used. Otherwise "index.js" is
//        // default. Can be overridden with ENTRY_FILE environment variable.
//        entryFile: "index.android.js",
//
//        // https://reactnative.dev/docs/performance#enable-the-ram-format
//        bundleCommand: "ram-bundle",
//
//        // whether to bundle JS and assets in debug mode
//        bundleInDebug: false,
//
//        // whether to bundle JS and assets in release mode
//        bundleInRelease: false,
//
//        // whether to bundle JS and assets in another build variant (if configured).
//        // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
//        // The configuration property can be in the following formats
//        //         'bundleIn${productFlavor}${buildType}'
//        //         'bundleIn${buildType}'
//        // bundleInFreeDebug: true,
//        // bundleInPaidRelease: true,
//        // bundleInBeta: true,
//
//        // whether to disable dev mode in custom build variants (by default only disabled in release)
//        // for example: to disable dev mode in the staging build type (if configured)
//        devDisabledInStaging: true,
//        // The configuration property can be in the following formats
//        //         'devDisabledIn${productFlavor}${buildType}'
//        //         'devDisabledIn${buildType}'
//
//        // the root of your project, i.e. where "package.json" lives
//        root: "../../",
//
//        // where to put the JS bundle asset in debug mode
//        jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
//
//        // where to put the JS bundle asset in release mode
//        jsBundleDirRelease: "$buildDir/intermediates/assets/release",
//
//        // where to put drawable resources / React Native assets, e.g. the ones you use via
//        // require('./image.png')), in debug mode
//        resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
//
//        // where to put drawable resources / React Native assets, e.g. the ones you use via
//        // require('./image.png')), in release mode
//        resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
//
//        // by default the gradle tasks are skipped if none of the JS files or assets change; this means
//        // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
//        // date; if you have any other folders that you want to ignore for performance reasons (gradle
//        // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
//        // for example, you might want to remove it from here.
//        inputExcludes: ["android/**", "ios/**"],
//
//        // override which node gets called and with what additional arguments
//        nodeExecutableAndArgs: ["node"],
//
//        // supply additional arguments to the packager
//        extraPackagerArgs: []
//]

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.olive.integrationsample"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"
        missingDimensionStrategy 'react-native-camera', 'general'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug{
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            debuggable false
            shrinkResources true
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
//    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // implementation files('libs/oliveupi-axis-debug.aar')
    // implementation files('libs/SecureComponent_UAT_18012021.aar')
    //    implementation files('libs/Android_CUG_SDK_v1.0.9.aar')
    implementation files('libs/olivesdk-release.aar')
    //  implementation files('libs/Android_UAT_SDK_v0.0.22.aar')
    implementation files('libs/securecomponentV1.5.2-PROD.aar')
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'org.webkit:android-jsc:+'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'commons-codec:commons-codec:1.15'
    implementation "commons-logging:commons-logging-api:1.1"
}
// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
